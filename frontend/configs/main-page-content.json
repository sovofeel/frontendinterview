{
  "/Users/ars/Desktop/sandbox/frontendinterview/pages/ru/js/example/code-examples.mdx": [
    {
      "answer": false,
      "example": true,
      "children": "// Какие будут значения\n1 + true\ntrue + true\n'1' + true\n'2' > '3'\n'two' > 'three'",
      "className": "js"
    },
    {
      "answer": true,
      "example": false,
      "children": "2\n2\n;('1true')\nfalse\ntrue",
      "className": "js"
    },
    {
      "answer": false,
      "example": true,
      "children": "  // В какой последовательности выведутся символы\n  console.log(\"A\");\n  setTimeout(() => console.log(\"B\"), 0);\n  setTimeout(() => console.log(\"C\"), 0);\n  console.log(\"D\");)",
      "className": "js"
    },
    {
      "answer": true,
      "example": false,
      "children": "'A', 'D', 'B', 'C'",
      "className": "js"
    },
    {
      "answer": false,
      "example": true,
      "children": "// На что будет сслаться \"this\"\nfunction Abc() {\n  console.log(this)\n}\nAbc()\nnew Abc()",
      "className": "js"
    },
    {
      "answer": true,
      "example": false,
      "children": "Window",
      "className": "js"
    },
    {
      "answer": false,
      "example": true,
      "children": "// Что выведется в консоль\nvar x = [1]\nvar y = x\n\nx = []\nconsole.log(x, y)",
      "className": "js"
    },
    {
      "answer": true,
      "example": false,
      "children": ";[][1]",
      "className": "js"
    },
    {
      "answer": false,
      "example": true,
      "children": "// Что выведется в консоль\nvar x = 1\nvar y = x\n\nx = 0\nconsole.log(x, y)",
      "className": "js"
    },
    { "answer": true, "example": false, "children": "0 1", "className": "js" },
    {
      "answer": false,
      "example": true,
      "children": "// Чему равен \"x\"\nvar x = 0.1 + 0.2 == 0.3",
      "className": "js"
    },
    {
      "answer": true,
      "example": false,
      "children": "false",
      "className": "js"
    },
    {
      "answer": false,
      "example": true,
      "children": "// Какое значение возвращает данное выражение?\n\"i'm a lasagna hog\".split('').reverse().join('')",
      "className": "js"
    },
    {
      "answer": true,
      "example": false,
      "children": "\"goh angasal a m'i\"\n",
      "className": "js"
    },
    {
      "answer": false,
      "example": true,
      "children": "// Чему равно foo.length?\nvar foo = []\nfoo.push(1)\nfoo.push(2)",
      "className": "js"
    },
    { "answer": true, "example": false, "children": "2", "className": "js" },
    {
      "answer": false,
      "example": true,
      "children": "// Чему равно foo.x?\nvar foo = { n: 1 }\nvar bar = foo\nfoo.x = foo = { n: 2 }",
      "className": "js"
    },
    {
      "answer": true,
      "example": false,
      "children": "  Object { n: 2 }",
      "className": "js"
    },
    {
      "answer": false,
      "example": true,
      "children": "// Чему равно foo?\nvar foo = 10 + '20'",
      "className": "js"
    },
    { "answer": true, "example": false, "children": "1020", "className": "js" }
  ],
  "/Users/ars/Desktop/sandbox/frontendinterview/pages/ru/js/question/clousure.mdx": [
    { "answer": false, "example": false },
    { "answer": false, "example": false },
    { "answer": false, "example": false }
  ],
  "/Users/ars/Desktop/sandbox/frontendinterview/pages/ru/js/question/event-delegation.mdx": [
    { "answer": false, "example": false },
    { "answer": false, "example": false }
  ],
  "/Users/ars/Desktop/sandbox/frontendinterview/pages/ru/js/question/protorype-inheratence.mdx": [
    { "answer": false, "example": false }
  ],
  "/Users/ars/Desktop/sandbox/frontendinterview/pages/ru/js/task/array-unique-items.mdx": [
    {
      "answer": false,
      "example": true,
      "children": "const list = [1, 1, 2, 2, 3, 4]\n\n// unique(list) => [1,2,3,4]",
      "className": "js"
    },
    {
      "answer": true,
      "example": false,
      "children": "function unique(arr) {\n  return arr.filter((item, index, self) => self.indexOf(item) === index)\n}",
      "className": "js"
    }
  ],
  "/Users/ars/Desktop/sandbox/frontendinterview/pages/ru/js/task/bomb.mdx": [
    {
      "answer": true,
      "example": false,
      "children": "function Bomb(message, delay) {\n  this.message = message\n\n  setTimeout(this.blowUp.bind(this), delay * 1000)\n}\n\nBomb.prototype.blowUp = function () {\n  console.log(this.message)\n}\n\nnew Bomb('Explosion!', 0.5)",
      "className": "js"
    }
  ],
  "/Users/ars/Desktop/sandbox/frontendinterview/pages/ru/js/task/create-custom-promise.mdx": [
    {
      "answer": true,
      "example": false,
      "children": "class CustomPromise {\n  state = 'PENDING'\n  value = undefined\n  thenCallbacks = []\n  errorCallbacks = []\n\n  constructor(action) {\n    action(this.resolver.bind(this), this.reject.bind(this))\n  }\n\n  resolver(value) {\n    this.state = 'RESOLVED'\n    this.value = value\n    this.thenCallbacks.forEach(callback => {\n      callback(this.value)\n    })\n  }\n\n  reject(value) {\n    this.state = 'REJECTED'\n    this.value = value\n    this.errorCallbacks.forEach(callback => {\n      callback(this.value)\n    })\n  }\n\n  then(callback) {\n    this.thenCallbacks.push(callback)\n    return this\n  }\n\n  catch(callback) {\n    this.errorCallbacks.push(callback)\n    return this\n  }\n}\n\nlet promise = new CustomPromise((resolver, reject) => {\n  setTimeout(() => {\n    const rand = Math.ceil(Math.random(1 * 1 + 6) * 6)\n    if (rand > 2) {\n      resolver('Success')\n    } else {\n      reject('Error')\n    }\n  }, 1000)\n})\n\npromise\n  .then(function (response) {\n    console.log(response)\n  })\n  .catch(function (error) {\n    console.log(error)\n  })",
      "className": "js"
    }
  ],
  "/Users/ars/Desktop/sandbox/frontendinterview/pages/ru/js/task/create-function-debounce.mdx": [
    {
      "answer": true,
      "example": false,
      "children": "const debounce = function (func, interval) {\n  let timerId\n  return function (e) {\n    clearTimeout(timerId)\n    timerId = setTimeout(function () {\n      func.apply()\n    }, interval)\n  }\n}\ndebounce(apiCall, 3000)",
      "className": "js"
    }
  ],
  "/Users/ars/Desktop/sandbox/frontendinterview/pages/ru/js/task/create-function-throttle.mdx": [
    {
      "answer": true,
      "example": false,
      "children": "const throttle = (callback, interval) => {\n  let timerId\n  let allowEvents = true\n\n  return function () {\n    let context = this\n    let args = arguments\n\n    if (allowEvents) {\n      callback.apply(context, args)\n      allowEvents = false\n      timerId = setTimeOut(function () {\n        allowEvents = true\n      }, interval)\n    }\n  }\n}",
      "className": "js"
    }
  ],
  "/Users/ars/Desktop/sandbox/frontendinterview/pages/ru/js/task/create-method-bind.mdx": [
    {
      "answer": true,
      "example": false,
      "children": "if (!Function.prototype.bind) {\n  Function.prototype.bind = function (...arg) {\n    const func = this\n    const context = arg[0]\n    const params = arg.slice(1)\n    return function (...innerParam) {\n      func.apply(context, [...params, ...innerParam])\n    }\n  }\n}",
      "className": "js"
    }
  ],
  "/Users/ars/Desktop/sandbox/frontendinterview/pages/ru/js/task/create-method-reduce.mdx": [
    {
      "answer": true,
      "example": false,
      "children": "Array.prototype.reduce = function (func, initState) {\n  const arr = this\n  const callback = func\n  let init = initState\n\n  arr.forEach(function (value, index) {\n    init = callback(init, value)\n  })\n  return init\n}",
      "className": "js"
    }
  ],
  "/Users/ars/Desktop/sandbox/frontendinterview/pages/ru/js/task/create-promise-all.mdx": [
    {
      "answer": true,
      "example": false,
      "children": "function promiseAll(promises) {\n  return new Promise((resolve, reject) => {\n    const results = []\n    let resolvedCount = 0\n\n    promises.forEach((promise, index) => {\n      promise\n        .then(result => {\n          results[index] = result\n\n          resolvedCount++\n\n          if (resolvedCount === promises.length) {\n            resolve(results)\n          }\n        })\n        .catch(err => reject(err))\n    })\n  })\n}\n\npromiseAll([\n  new Promise(resolve => {\n    setTimeout(() => resolve('foo'), 5000)\n  }),\n\n  new Promise((resolve, reject) => {\n    setTimeout(() => resolve('bar'), 1000)\n  }),\n\n  new Promise((resolve, reject) => {\n    setTimeout(() => {\n      Math.round(Math.random() * 10) % 2 === 0 ? resolve('baz') : reject(new Error())\n    }, 300)\n  }),\n])\n  .then(res => console.log('RESOLVED: ', res))\n  .catch(err => console.log('REJECTED: ', err))",
      "className": "js"
    }
  ],
  "/Users/ars/Desktop/sandbox/frontendinterview/pages/ru/js/task/create-prototype-bind.mdx": [
    {
      "answer": false,
      "example": false,
      "children": "Function.prototype.bind = function (context, ...argsBind) {\n  const fn = this\n  return function (...args) {\n    return fn.apply(context, argsBind.concat(args))\n  }\n}",
      "className": "js"
    }
  ],
  "/Users/ars/Desktop/sandbox/frontendinterview/pages/ru/js/task/how-to-delegation.mdx": [
    {
      "answer": false,
      "example": true,
      "children": "<div class=\"wrapper\">\n  <div class=\"child\">\n    <div>\n      <div><div>click me</div></div>\n    </div>\n  </div>\n  <div class=\"child\">\n    <div>\n      <div><div>click me</div></div>\n    </div>\n  </div>\n  <div class=\"child\">\n    <div>\n      <div><div>click me</div></div>\n    </div>\n  </div>\n  <div class=\"other\">\n    <div>\n      <div><div>dont't click me</div></div>\n    </div>\n  </div>\n</div>",
      "className": "html"
    },
    {
      "answer": true,
      "example": false,
      "children": "const delegate = (eventName, el, selector, handler) => {\n  el.addEventListener(eventName, event => {\n    let node = event.target\n    const items = [].slice.call(el.querySelectorAll(selector))\n\n    if (items.length) {\n      while (node !== el && node !== null) {\n        const isTarget = items.some(item => node === item)\n\n        if (isTarget) {\n          handler(node)\n          break\n        } else {\n          node = node.parentNode\n        }\n      }\n    }\n  })\n}\n\ndelegate(\n  'click',\n  document.querySelector('.wrapper'),\n  '.child',\n  el => (el.style.backgroundColor = 'blue')\n)",
      "className": "js"
    }
  ],
  "/Users/ars/Desktop/sandbox/frontendinterview/pages/ru/js/task/is-pallindrom.mdx": [
    {
      "answer": true,
      "example": false,
      "children": "function isEqualSymbols(str1, str2) {\n  if (str1.length !== str2.length) {\n    return false\n  }\n\n  if (str1.split('').sort().join('') === str2.split('').sort().join('')) {\n    return true\n  }\n\n  return false\n}",
      "className": "js"
    }
  ],
  "/Users/ars/Desktop/sandbox/frontendinterview/pages/ru/js/task/make-flat-array.mdx": [
    {
      "answer": false,
      "example": true,
      "children": "/**\n * [1,2,[3,4]] -> [1,2,3,4]\n */",
      "className": "jx"
    },
    {
      "answer": true,
      "example": false,
      "children": "let arr = [1, 2, [3, 4, [5, 6, [7, [8, 9, 10]]]]]\n\nfunction flatten(arr) {\n  return arr.reduce(function (acc, next) {\n    let isArray = Array.isArray(next)\n    return acc.concat(isArray ? flatten(next) : next)\n  }, [])\n}\n\nif (!Array.prototype.flatten) {\n  Array.prototype.flatten = function () {\n    return flatten(this)\n  }\n}\nconsole.log(arr.flatten())",
      "className": "js"
    }
  ],
  "/Users/ars/Desktop/sandbox/frontendinterview/pages/ru/js/task/odd-sort.mdx": [
    {
      "answer": false,
      "example": true,
      "children": "oddSort([7, 3, 4, 9, 5, 2, 17]) // => [3, 5, 4, 7, 9, 2, 17]",
      "className": "js"
    },
    {
      "answer": true,
      "example": false,
      "children": "function oddSort(arr) {\n  arr.forEach((item, index) => {\n    if (item % 2 === 1) {\n      let sortNumber = item\n\n      for (let i = 0; i < index; i++) {\n        if (arr[i] % 2 === 1) {\n          if (arr[i] > sortNumber) {\n            const tmp = sortNumber\n\n            sortNumber = arr[i]\n            arr[i] = tmp\n          }\n        }\n      }\n      arr[index] = sortNumber\n    }\n  })\n\n  return arr\n}",
      "className": "js"
    }
  ],
  "/Users/ars/Desktop/sandbox/frontendinterview/pages/ru/js/task/sum-of-tree-vertices.mdx": [
    {
      "answer": true,
      "example": false,
      "children": "function getTreeSum(node) {\n  let sum = node.value\n\n  if (Array.isArray(node.children)) {\n    node.children.forEach(item => (sum += getTreeSum(item)))\n  }\n\n  return sum\n}",
      "className": "js"
    }
  ],
  "/Users/ars/Desktop/sandbox/frontendinterview/pages/ru/react/question/key.mdx": [
    { "answer": false, "example": false },
    { "answer": false, "example": false }
  ]
}
