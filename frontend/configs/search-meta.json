[
  {
    "content": "Методы перебора массива",
    "id": "0799a954-14db-471d-90cb-db43fa8d331e",
    "type": "lvl1",
    "url": "/ru/js/question/array-iterate-methods",
    "hierarchy": {
      "lvl1": "Методы перебора массива",
      "lvl2": "Назовите какими методами можно перебрать массив и что каждый из них делает",
      "lvl3": ["array", "forEach", "filer", "map", "every", "some", "reduce"]
    }
  },
  {
    "content": "Как работают методы apply(), call() и bind()",
    "id": "867baf14-327f-4d05-9a13-78a98704958f",
    "type": "lvl1",
    "url": "/ru/js/question/bind-call-apply",
    "hierarchy": {
      "lvl1": "Как работают методы apply(), call() и bind()",
      "lvl2": "Расскажите как работает привязка к контексту, и в чем отличие этих методов",
      "lvl3": ["apply", "call", "bind"]
    }
  },
  {
    "content": "Что такое замыкание",
    "id": "857b24ce-d620-4952-a816-ceef323cdf29",
    "type": "lvl1",
    "url": "/ru/js/question/clousure",
    "hierarchy": {
      "lvl1": "Что такое замыкание",
      "lvl2": "Объясните что такое замыкание для чего его используют, и какие приемущества он дает.",
      "lvl3": ["fundamental", "closure", "function"]
    }
  },
  {
    "content": "Что такое делегирование событий",
    "id": "b7e589d8-8624-4814-8333-195b75d03911",
    "type": "lvl1",
    "url": "/ru/js/question/event-delegation",
    "hierarchy": {
      "lvl1": "Что такое делегирование событий",
      "lvl2": "Объясните делегирование событий, в чем его смысл и основные приемущесива",
      "lvl3": ["fundamental", "event delegation"]
    }
  },
  {
    "content": "event loop",
    "id": "5bef7d50-d4e3-404c-a544-8bdae561f9ad",
    "type": "lvl1",
    "url": "/ru/js/question/event-loop",
    "hierarchy": {
      "lvl1": "event loop",
      "lvl2": "Что такое цикл событий (event loop) и как он работает?",
      "lvl3": ["fundamental", "event loop"]
    }
  },
  {
    "content": "Какие ложные значния есть в JS",
    "id": "a08cde13-d242-4cfb-bb5a-a9d0029ce897",
    "type": "lvl1",
    "url": "/ru/js/question/falsy-values",
    "hierarchy": {
      "lvl1": "Какие ложные значния есть в JS",
      "lvl2": "Перечислите какие ложные значения есть",
      "lvl3": ["falsy values"]
    }
  },
  {
    "content": "Что такое Promise",
    "id": "78eb5afe-9872-4462-a1f8-39d51cfdf493",
    "type": "lvl1",
    "url": "/ru/js/question/promise",
    "hierarchy": {
      "lvl1": "Что такое Promise",
      "lvl2": "Расскажите что такое Promise и зачем он используется",
      "lvl3": ["fundamental", "this"]
    }
  },
  {
    "content": "Что такое прототипы",
    "id": "259df78c-997c-45a3-a8f3-5205cbcc53e7",
    "type": "lvl1",
    "url": "/ru/js/question/protorype-inheratence",
    "hierarchy": {
      "lvl1": "Что такое прототипы",
      "lvl2": "Расскажите что такое прототипы и как работает прототипное наследование",
      "lvl3": ["fundamental", "prototype inheritance", "prototype"]
    }
  },
  {
    "content": "Set, Map, WeakSet и WeakMap",
    "id": "1a3484dc-f78f-496f-b0cc-a5aa2f7a8537",
    "type": "lvl1",
    "url": "/ru/js/question/set-map-weakset-weak-map",
    "hierarchy": {
      "lvl1": "Set, Map, WeakSet и WeakMap",
      "lvl2": "Что такое Set, Map, WeakSet и WeakMap и в чем их особенности",
      "lvl3": ["Set", "Map", "WeakSet", "WeakMap"]
    }
  },
  {
    "content": "Как работает this",
    "id": "a9e2ddd6-89e8-4f0b-94bd-3e22dbee287c",
    "type": "lvl1",
    "url": "/ru/js/question/this-keyword",
    "hierarchy": {
      "lvl1": "Как работает this",
      "lvl2": "Расскажите как this работает с разными областями видимости, и какие особенности поведетия есть",
      "lvl3": ["fundamental", "this"]
    }
  },
  {
    "content": "Уникализация значений в массиве",
    "id": "c5086acf-8e97-471b-80c2-dbacf1997155",
    "type": "lvl1",
    "url": "/ru/js/task/array-unique-items",
    "hierarchy": {
      "lvl1": "Уникализация значений в массиве",
      "lvl2": "Необходимо написать функцию, принимающую в аргументах массив целых чисел и возвращающую новый массив, состоящий только из уникальных значений первого массива.",
      "lvl3": ["array"]
    }
  },
  {
    "content": "Функция Bomb",
    "id": "e358ec30-d765-470b-96d3-fbd820d17bfe",
    "type": "lvl1",
    "url": "/ru/js/task/bomb",
    "hierarchy": {
      "lvl1": "Функция Bomb",
      "lvl2": "Надо реализовать «бомбу» (в виде функции-конструктора), которая получает на входе время, через которое взорвется и некоторый «звук взрыва» (строку, которую вернет через заданное время)",
      "lvl3": ["prototype", "class"]
    }
  },
  {
    "content": "Функция клонирования объекта",
    "id": "5e260875-f7d4-4e61-be6d-c7d7891c5f38",
    "type": "lvl1",
    "url": "/ru/js/task/clone-object",
    "hierarchy": {
      "lvl1": "Функция клонирования объекта",
      "lvl2": "Напишите функцию cloneObj, в результате которой создается новая копия объекта",
      "lvl3": ["object", "deep clone object"]
    }
  },
  {
    "content": "Создайте промис с нуля",
    "id": "b561983e-3334-47d8-bcfa-ecff421e1047",
    "type": "lvl1",
    "url": "/ru/js/task/create-custom-promise",
    "hierarchy": {
      "lvl1": "Создайте промис с нуля",
      "lvl2": "Создайте класс CustomPromise, который реализует функционал класса Promise",
      "lvl3": ["promise"]
    }
  },
  {
    "content": "Реализуйте функцию debounce",
    "id": "92b039fd-af10-419f-96e8-f86d9502f6ad",
    "type": "lvl1",
    "url": "/ru/js/task/create-function-debounce",
    "hierarchy": {
      "lvl1": "Реализуйте функцию debounce",
      "lvl2": "Результатом декоратора debounce(f, ms) должна быть обёртка, которая передаёт вызов f не более одного раза в ms миллисекунд. Другими словами, когда мы вызываем debounce, это гарантирует, что все остальные вызовы будут игнорироваться в течение ms.",
      "lvl3": ["array", "debounce"]
    }
  },
  {
    "content": "Реализуйте функцию throttle",
    "id": "edf62219-cf30-4897-8047-4d9bf1258abe",
    "type": "lvl1",
    "url": "/ru/js/task/create-function-throttle",
    "hierarchy": {
      "lvl1": "Реализуйте функцию throttle",
      "lvl2": "Создайте «тормозящий» декоратор throttle(f, ms), который возвращает обёртку, передавая вызов в f не более одного раза в ms миллисекунд. Те вызовы, которые попадают в период «торможения», игнорируются.",
      "lvl3": ["array", "throttle"]
    }
  },
  {
    "content": "Реализуйте метод reduce",
    "id": "48520ae0-0f3f-4268-858f-7365c2db0243",
    "type": "lvl1",
    "url": "/ru/js/task/create-method-reduce",
    "hierarchy": {
      "lvl1": "Реализуйте метод reduce",
      "lvl2": "Представьте что в JS отсуствует функция reduce и реализуйте ее самостоятельно c помощью прототипов",
      "lvl3": ["array", "reduce"]
    }
  },
  {
    "content": "Реализуйте аналог Promise.all",
    "id": "336efeb7-f74d-4a19-887f-f15fd8140090",
    "type": "lvl1",
    "url": "/ru/js/task/create-promise-all",
    "hierarchy": {
      "lvl1": "Реализуйте аналог Promise.all",
      "lvl2": "Добавьте функцию promiseAll, принимающую массив с промисами и выполняющую их по очереди",
      "lvl3": ["promise"]
    }
  },
  {
    "content": "Реализовуйте аналог Function.prototype.bind",
    "id": "47b5ec42-62e6-401f-9999-8b44127d1131",
    "type": "lvl1",
    "url": "/ru/js/task/create-prototype-bind",
    "hierarchy": {
      "lvl1": "Реализовуйте аналог Function.prototype.bind",
      "lvl2": "Представьте что в JS отсуствует функция bind и реализуйте ее самостоятельно c помощью прототипов",
      "lvl3": ["prototype", "bind"]
    }
  },
  {
    "content": "Реализуйте делегирование",
    "id": "6b0ea3c6-9eac-42ff-92fc-401ce7731d2c",
    "type": "lvl1",
    "url": "/ru/js/task/how-to-delegation",
    "hierarchy": {
      "lvl1": "Реализуйте делегирование",
      "lvl2": "Реализуйте функцию, принимающую название события, элемент родителя, селектор дочернего элемента и функцию callback, производящую действия над дочернем элементом",
      "lvl3": ["event delegation", "DOM"]
    }
  },
  {
    "content": "Идентичный алфавит",
    "id": "d7bee6be-8385-4647-a600-a567509380fd",
    "type": "lvl1",
    "url": "/ru/js/task/is-pallindrom",
    "hierarchy": {
      "lvl1": "Идентичный алфавит",
      "lvl2": "Необходимо написать функцию, принимающую в аргументах две строки и возвращающую true, если эти строки состоят из идентичных букв и false в противном случае.",
      "lvl3": ["string", "sort"]
    }
  },
  {
    "content": "Сделайте вложенный массив плоским",
    "id": "343225e7-0503-4ea8-8ece-9b4e1ad78215",
    "type": "lvl1",
    "url": "/ru/js/task/make-flat-array",
    "hierarchy": {
      "lvl1": "Сделайте вложенный массив плоским",
      "lvl2": "Создайте функцию принимающую массив разных уровней вложенности, и возвращающую массив без вложенности",
      "lvl3": ["array", "flat"]
    }
  },
  {
    "content": "Сортировка нечётных",
    "id": "b01e2057-1460-4443-b781-435ce0fba5a2",
    "type": "lvl1",
    "url": "/ru/js/task/odd-sort",
    "hierarchy": {
      "lvl1": "Сортировка нечётных",
      "lvl2": "Необходимо написать функцию, принимающую в аргументах массив и возвращающую новый массив, в котором отсортированы все нечетные числа по возрастанию, в то время как чётные остаются на своих местах.",
      "lvl3": ["array", "sort"]
    }
  },
  {
    "content": "Сумма вершин дерева",
    "id": "b0b8d60f-422f-445e-b635-010c2f98fd41",
    "type": "lvl1",
    "url": "/ru/js/task/sum-of-tree",
    "hierarchy": {
      "lvl1": "Сумма вершин дерева",
      "lvl2": "Найдите сумму вершин для дерева, без ограничений по вложенности",
      "lvl3": ["array", "recursion"]
    }
  },
  {
    "content": "props и state в React",
    "id": "c0636cea-74d9-4cfa-b2ab-786abc4d54e7",
    "type": "lvl1",
    "url": "/ru/react/question/difference-between-props-and-state",
    "hierarchy": {
      "lvl1": "props и state в React",
      "lvl2": "Расскажите что такое props и state в React, в чем их отличия и для чего они нужны",
      "lvl3": ["react state", "react props"]
    }
  },
  {
    "content": "Для чего нужен атрибут key в React?",
    "id": "3159cdf6-0406-45bc-8de4-e810e02fa5ae",
    "type": "lvl1",
    "url": "/ru/react/question/key",
    "hierarchy": {
      "lvl1": "Для чего нужен атрибут key в React?",
      "lvl2": "Расскажите чего нужен атрибут key при рендере в JSX списка элементов",
      "lvl3": ["react key"]
    }
  },
  {
    "content": "Порталы в React",
    "id": "942b2c6f-266a-443e-a37c-b883e3f7b09a",
    "type": "lvl1",
    "url": "/ru/react/question/portal",
    "hierarchy": {
      "lvl1": "Порталы в React",
      "lvl2": "Расскажите что такое порталы в React и где их применяют",
      "lvl3": ["react portal"]
    }
  },
  {
    "content": "PureComponent",
    "id": "1709793c-0706-4b9f-b412-48a0647524b8",
    "type": "lvl1",
    "url": "/ru/react/question/pure-component",
    "hierarchy": {
      "lvl1": "PureComponent",
      "lvl2": "Расскажите что такое PureComponent, в чем его особенности и чем он отличается от обычных компонент",
      "lvl3": ["PureComponent"]
    }
  },
  {
    "content": "React Reconciliation",
    "id": "3151c5a8-398c-4f7e-952d-b3f249473a47",
    "type": "lvl1",
    "url": "/ru/react/question/react-reconciliation",
    "hierarchy": {
      "lvl1": "React Reconciliation",
      "lvl2": "Что такое React Reconciliation (Cверка) и как он работает?",
      "lvl3": ["react reconciliation"]
    }
  },
  {
    "content": "Типы компонентов есть в React",
    "id": "de996996-771d-4bb5-b3de-09a9e812554d",
    "type": "lvl1",
    "url": "/ru/react/question/type-or-react-component",
    "hierarchy": {
      "lvl1": "Типы компонентов есть в React",
      "lvl2": "Расскажите какие основные типы компонентов есть в React, в чем их приемущества и недостатки",
      "lvl3": ["react component"]
    }
  },
  {
    "content": "Почему не работает setState",
    "id": "8b1d58a4-9756-4d6f-942b-7ab2e7a31b23",
    "type": "lvl1",
    "url": "/ru/react/task/buggy-counter",
    "hierarchy": {
      "lvl1": "Почему не работает setState",
      "lvl2": "Исправьте поведение счетчика, на каждый клик он должен увеличивать state на 5",
      "lvl3": ["setState"]
    }
  }
]
