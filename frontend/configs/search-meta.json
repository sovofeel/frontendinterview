[
  {
    "content": "Что выведет код этот код?",
    "id": "638d18ad-ad74-4e40-8667-03c610aea70a",
    "type": "lvl1",
    "url": "/ru/js/example/code-examples",
    "hierarchy": {
      "lvl1": "Что выведет код этот код?",
      "lvl2": "Набор примеров кода, проверьте, знаете ли вы что выведет код в примерах ниже"
    }
  },
  {
    "content": "Методы перебора массива",
    "id": "e31ec238-cd6a-4b17-a4fe-21dae8700a3b",
    "type": "lvl1",
    "url": "/ru/js/question/array-iterate-methods",
    "hierarchy": {
      "lvl1": "Методы перебора массива",
      "lvl2": "Назовите какими методами можно перебрать массив и что каждый из них делает",
      "lvl3": ["array", "forEach", "filer", "map", "every", "some", "reduce"]
    }
  },
  {
    "content": "Что такое замыкание",
    "id": "3c34291e-242e-42c1-933d-503e2a190511",
    "type": "lvl1",
    "url": "/ru/js/question/clousure",
    "hierarchy": {
      "lvl1": "Что такое замыкание",
      "lvl2": "Объясните что такое замыкание для чего его используют, и какие приемущества он дает.",
      "lvl3": ["fundamental", "closure", "function"]
    }
  },
  {
    "content": "Что такое делегирование событий",
    "id": "1ba5501c-320f-42cc-9646-9e1b4d2a3b66",
    "type": "lvl1",
    "url": "/ru/js/question/event-delegation",
    "hierarchy": {
      "lvl1": "Что такое делегирование событий",
      "lvl2": "Объясните делегирование событий, в чем его смысл и основные приемущесива",
      "lvl3": ["fundamental", "event delegation"]
    }
  },
  {
    "content": "Какие ложные значния есть в JS",
    "id": "e002ca31-756f-4bd5-8755-67ff99aa777e",
    "type": "lvl1",
    "url": "/ru/js/question/falsy-values",
    "hierarchy": {
      "lvl1": "Какие ложные значния есть в JS",
      "lvl2": "Перечислите какие ложные значения есть",
      "lvl3": ["falsy values"]
    }
  },
  {
    "content": "Что такое прототипы",
    "id": "b052e421-e839-4674-96e9-3fef56660c21",
    "type": "lvl1",
    "url": "/ru/js/question/protorype-inheratence",
    "hierarchy": {
      "lvl1": "Что такое прототипы",
      "lvl2": "Расскажите что такое прототипы и как работает прототипное наследование",
      "lvl3": ["fundamental", "prototype inheritance"]
    }
  },
  {
    "content": "Уникализация значений в массиве",
    "id": "bc0c7611-8495-4bc8-ae6e-5cccae8da04b",
    "type": "lvl1",
    "url": "/ru/js/task/array-unique-items",
    "hierarchy": {
      "lvl1": "Уникализация значений в массиве",
      "lvl2": "Необходимо написать функцию, принимающую в аргументах массив целых чисел и возвращающую новый массив, состоящий только из уникальных значений первого массива.",
      "lvl3": ["array"]
    }
  },
  {
    "content": "Функция Bomb",
    "id": "20d4972b-e6b7-4d92-8c73-7d93ba41e004",
    "type": "lvl1",
    "url": "/ru/js/task/bomb",
    "hierarchy": {
      "lvl1": "Функция Bomb",
      "lvl2": "Надо реализовать «бомбу» (в виде функции-конструктора), которая получает на входе время, через которое взорвется и некоторый «звук взрыва» (строку, которую вернет через заданное время)",
      "lvl3": ["prototype", "class"]
    }
  },
  {
    "content": "Функция клонирования объекта",
    "id": "46c2b25a-ac17-452e-a7b5-4cc710af44af",
    "type": "lvl1",
    "url": "/ru/js/task/clone-object",
    "hierarchy": {
      "lvl1": "Функция клонирования объекта",
      "lvl2": "Напишите функцию cloneObj, в результате которой создается новая копия объекта",
      "lvl3": ["spread", "assign", "object"]
    }
  },
  {
    "content": "Создайте промис с нуля",
    "id": "ba0b2964-d226-4005-9690-e2ffe55faa5c",
    "type": "lvl1",
    "url": "/ru/js/task/create-custom-promise",
    "hierarchy": {
      "lvl1": "Создайте промис с нуля",
      "lvl2": "Создайте класс CustomPromise, который реализует функционал new Promise",
      "lvl3": ["promise"]
    }
  },
  {
    "content": "Реализуйте функцию debounce",
    "id": "1ca8b1d3-49f4-4c54-86fc-0e4c1dd56ad9",
    "type": "lvl1",
    "url": "/ru/js/task/create-function-debounce",
    "hierarchy": {
      "lvl1": "Реализуйте функцию debounce",
      "lvl2": "Результатом декоратора debounce(f, ms) должна быть обёртка, которая передаёт вызов f не более одного раза в ms миллисекунд. Другими словами, когда мы вызываем debounce, это гарантирует, что все остальные вызовы будут игнорироваться в течение ms.",
      "lvl3": ["array", "debounce"]
    }
  },
  {
    "content": "Реализуйте функцию throttle",
    "id": "d2732a99-863d-41ae-9769-3290da5b6110",
    "type": "lvl1",
    "url": "/ru/js/task/create-function-throttle",
    "hierarchy": {
      "lvl1": "Реализуйте функцию throttle",
      "lvl2": "Создайте «тормозящий» декоратор throttle(f, ms), который возвращает обёртку, передавая вызов в f не более одного раза в ms миллисекунд. Те вызовы, которые попадают в период «торможения», игнорируются.",
      "lvl3": ["array", "throttle"]
    }
  },
  {
    "content": "Реализуйте метод reduce",
    "id": "bb458de9-3d91-4484-8cee-d025db47f4f7",
    "type": "lvl1",
    "url": "/ru/js/task/create-method-reduce",
    "hierarchy": {
      "lvl1": "Реализуйте метод reduce",
      "lvl2": "Представьте что в JS отсуствует функция reduce и реализуйте ее самостоятельно c помощью прототипов",
      "lvl3": ["array", "reduce"]
    }
  },
  {
    "content": "Реализуйте аналог Promise.all",
    "id": "0a66c680-b30e-4fe7-87fc-91fd326b0e39",
    "type": "lvl1",
    "url": "/ru/js/task/create-promise-all",
    "hierarchy": {
      "lvl1": "Реализуйте аналог Promise.all",
      "lvl2": "Добавьте функцию promiseAll, принимающую массив с промисами и выполняющую их по очереди",
      "lvl3": ["promise"]
    }
  },
  {
    "content": "Реализовуйте аналог Function.prototype.bind",
    "id": "d8bf7505-ce09-4ccf-9f6f-5f12a46dc80c",
    "type": "lvl1",
    "url": "/ru/js/task/create-prototype-bind",
    "hierarchy": {
      "lvl1": "Реализовуйте аналог Function.prototype.bind",
      "lvl2": "Представьте что в JS отсуствует функция bind и реализуйте ее самостоятельно c помощью прототипов",
      "lvl3": ["prototype", "bind"]
    }
  },
  {
    "content": "Реализуйте делегирование",
    "id": "d2d9109b-a491-43c1-93aa-65f71fcaa448",
    "type": "lvl1",
    "url": "/ru/js/task/how-to-delegation",
    "hierarchy": {
      "lvl1": "Реализуйте делегирование",
      "lvl2": "Реализуйте функцию, принимающую название события, элемент родителя, селектор дочернего элемента и функцию callback, производящую действия над дочернем элементом",
      "lvl3": ["event delegation", "DOM"]
    }
  },
  {
    "content": "Идентичный алфавит",
    "id": "9b133329-b187-47f9-a683-402de1774af8",
    "type": "lvl1",
    "url": "/ru/js/task/is-pallindrom",
    "hierarchy": {
      "lvl1": "Идентичный алфавит",
      "lvl2": "Необходимо написать функцию, принимающую в аргументах две строки и возвращающую true, если эти строки состоят из идентичных букв и false в противном случае.",
      "lvl3": ["string", "sort"]
    }
  },
  {
    "content": "Сделайте вложенный массив плоским",
    "id": "890a4c55-48a1-4d1d-9b40-e105f3cad597",
    "type": "lvl1",
    "url": "/ru/js/task/make-flat-array",
    "hierarchy": {
      "lvl1": "Сделайте вложенный массив плоским",
      "lvl2": "Создайте функцию принимающую массив разных уровней вложенности, и возвращающую массив без вложенности",
      "lvl3": ["array", "flat"]
    }
  },
  {
    "content": "Сортировка нечётных",
    "id": "188a0f8e-a2f2-4654-aa9d-1eedbb82c8fd",
    "type": "lvl1",
    "url": "/ru/js/task/odd-sort",
    "hierarchy": {
      "lvl1": "Сортировка нечётных",
      "lvl2": "Необходимо написать функцию, принимающую в аргументах массив и возвращающую новый массив, в котором отсортированы все нечетные числа по возрастанию, в то время как чётные остаются на своих местах.",
      "lvl3": ["array", "sort"]
    }
  },
  {
    "content": "Сумма вершин дерева",
    "id": "9b6825eb-c934-4f77-b6b8-4f49adafd382",
    "type": "lvl1",
    "url": "/ru/js/task/sum-of-tree",
    "hierarchy": {
      "lvl1": "Сумма вершин дерева",
      "lvl2": "Найдите сумму вершин для дерева, без ограничений по вложенности",
      "lvl3": ["array", "recursion"]
    }
  },
  {
    "content": "props и state в React",
    "id": "8197995b-b207-46f3-b56d-11ae8be2fbd1",
    "type": "lvl1",
    "url": "/ru/react/question/difference-between-props-and-state",
    "hierarchy": {
      "lvl1": "props и state в React",
      "lvl2": "Расскажите что такое props и state в React, в чем их отличия и для чего они нужны",
      "lvl3": ["react state", "react state"]
    }
  },
  {
    "content": "Для чего нужен атрибут key в React?",
    "id": "a39e749f-eb14-4caf-a1f7-cdce54b5974e",
    "type": "lvl1",
    "url": "/ru/react/question/key",
    "hierarchy": {
      "lvl1": "Для чего нужен атрибут key в React?",
      "lvl2": "Расскажите чего нужен атрибут key при рендере в JSX списка элементов",
      "lvl3": ["react key"]
    }
  },
  {
    "content": "Типы компонентов есть в React",
    "id": "7d88bf37-dcd4-422d-bbbb-84b3b88723b5",
    "type": "lvl1",
    "url": "/ru/react/question/type-or-react-component",
    "hierarchy": {
      "lvl1": "Типы компонентов есть в React",
      "lvl2": "Расскажите какие основные типы компонентов есть в React, в чем их приемущества и недостатки",
      "lvl3": ["react component"]
    }
  }
]
