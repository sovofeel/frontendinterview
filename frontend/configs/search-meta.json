[
  {
    "content": "Методы перебора массива",
    "id": "856bbb1e-1964-4250-aa9f-03a853411f0f",
    "type": "lvl1",
    "url": "/ru/js/question/array-iterate-methods",
    "hierarchy": {
      "lvl1": "Методы перебора массива",
      "lvl2": "Назовите какими методами можно перебрать массив и что каждый из них делает",
      "lvl3": ["array", "forEach", "filter", "map", "every", "some", "reduce"]
    }
  },
  {
    "content": "Как работают методы apply, call и bind",
    "id": "3a17b728-257f-46d0-aacb-11ef81fc0baf",
    "type": "lvl1",
    "url": "/ru/js/question/bind-call-apply",
    "hierarchy": {
      "lvl1": "Как работают методы apply, call и bind",
      "lvl2": "Расскажите как работает привязка к контексту, и в чем отличие этих методов",
      "lvl3": ["apply", "call", "bind"]
    }
  },
  {
    "content": "Что такое замыкание",
    "id": "76ebf83a-1a83-464b-94ae-6ebdb57ef5bf",
    "type": "lvl1",
    "url": "/ru/js/question/clousure",
    "hierarchy": {
      "lvl1": "Что такое замыкание",
      "lvl2": "Объясните что такое замыкание для чего его используют, и какие приемущества он дает.",
      "lvl3": ["fundamental", "closure", "function"]
    }
  },
  {
    "content": "Что такое делегирование событий",
    "id": "a961e37b-a6b1-4797-9d8f-63adce5b7f7a",
    "type": "lvl1",
    "url": "/ru/js/question/event-delegation",
    "hierarchy": {
      "lvl1": "Что такое делегирование событий",
      "lvl2": "Объясните делегирование событий, в чем его смысл и основные приемущесива",
      "lvl3": ["fundamental", "event delegation"]
    }
  },
  {
    "content": "event loop",
    "id": "6bfc73cc-648d-418c-930d-aa0b333be52a",
    "type": "lvl1",
    "url": "/ru/js/question/event-loop",
    "hierarchy": {
      "lvl1": "event loop",
      "lvl2": "Что такое цикл событий (event loop) и как он работает?",
      "lvl3": ["fundamental", "event loop"]
    }
  },
  {
    "content": "Какие ложные значния есть в JS",
    "id": "be2c4e54-fbf9-4088-a269-7237c8176683",
    "type": "lvl1",
    "url": "/ru/js/question/falsy-values",
    "hierarchy": {
      "lvl1": "Какие ложные значния есть в JS",
      "lvl2": "Перечислите какие ложные значения есть",
      "lvl3": ["falsy values"]
    }
  },
  {
    "content": "Что такое hosting",
    "id": "1203b79b-9f29-4fe8-9599-e6238a964103",
    "type": "lvl1",
    "url": "/ru/js/question/hoisting",
    "hierarchy": {
      "lvl1": "Что такое hosting",
      "lvl2": "Объясните что такое hosting и почему важно знать как это работает",
      "lvl3": ["fundamental", "hosting"]
    }
  },
  {
    "content": "Что такое Promise",
    "id": "8da52f72-4f9d-45e1-bb4e-ba66f9831cec",
    "type": "lvl1",
    "url": "/ru/js/question/promise",
    "hierarchy": {
      "lvl1": "Что такое Promise",
      "lvl2": "Расскажите что такое Promise и зачем он используется",
      "lvl3": ["fundamental", "this"]
    }
  },
  {
    "content": "Что такое прототипы",
    "id": "5f67b43b-a7f0-4948-9629-fc455323ff3a",
    "type": "lvl1",
    "url": "/ru/js/question/protorype-inheratence",
    "hierarchy": {
      "lvl1": "Что такое прототипы",
      "lvl2": "Расскажите что такое прототипы и как работает прототипное наследование",
      "lvl3": ["fundamental", "prototype inheritance", "prototype"]
    }
  },
  {
    "content": "Область видимости Переменных",
    "id": "3ca76b34-f9c8-4b8b-937e-f7d3c49016b4",
    "type": "lvl1",
    "url": "/ru/js/question/scope",
    "hierarchy": {
      "lvl1": "Область видимости Переменных",
      "lvl2": "Объясните концепцию области видимости переменных и назовите какие типы области видимости есть",
      "lvl3": ["scope"]
    }
  },
  {
    "content": "Set, Map, WeakSet и WeakMap",
    "id": "d0a64bb1-72b4-4132-9796-9db366a26f0c",
    "type": "lvl1",
    "url": "/ru/js/question/set-map-weakset-weak-map",
    "hierarchy": {
      "lvl1": "Set, Map, WeakSet и WeakMap",
      "lvl2": "Что такое Set, Map, WeakSet и WeakMap и в чем их особенности",
      "lvl3": ["Set", "Map", "WeakSet", "WeakMap"]
    }
  },
  {
    "content": "Как работает this",
    "id": "c9ebc56b-ad2c-4e35-a0c9-e5473661aa56",
    "type": "lvl1",
    "url": "/ru/js/question/this-keyword",
    "hierarchy": {
      "lvl1": "Как работает this",
      "lvl2": "Расскажите как this работает с разными областями видимости, и какие особенности поведетия есть",
      "lvl3": ["fundamental", "this"]
    }
  },
  {
    "content": "Уникализация значений в массиве",
    "id": "e4485245-6531-495b-bf67-4b290517e767",
    "type": "lvl1",
    "url": "/ru/js/task/array-unique-items",
    "hierarchy": {
      "lvl1": "Уникализация значений в массиве",
      "lvl2": "Необходимо написать функцию, принимающую в аргументах массив целых чисел и возвращающую новый массив, состоящий только из уникальных значений первого массива.",
      "lvl3": ["array"]
    }
  },
  {
    "content": "Функция Bomb",
    "id": "c62ae21d-8827-4fe2-bd17-d7071434756c",
    "type": "lvl1",
    "url": "/ru/js/task/bomb",
    "hierarchy": {
      "lvl1": "Функция Bomb",
      "lvl2": "Надо реализовать «бомбу» (в виде функции-конструктора), которая получает на входе время, через которое взорвется и некоторый «звук взрыва» (строку, которую вернет через заданное время)",
      "lvl3": ["prototype", "class"]
    }
  },
  {
    "content": "Функция клонирования объекта",
    "id": "8c6979fd-6d7f-4456-9d91-e74419418d50",
    "type": "lvl1",
    "url": "/ru/js/task/clone-object",
    "hierarchy": {
      "lvl1": "Функция клонирования объекта",
      "lvl2": "Напишите функцию cloneObj, в результате которой создается новая копия объекта",
      "lvl3": ["object", "deep clone object"]
    }
  },
  {
    "content": "Создайте промис с нуля",
    "id": "04f80a7e-9578-4310-9487-2e926fc41424",
    "type": "lvl1",
    "url": "/ru/js/task/create-custom-promise",
    "hierarchy": {
      "lvl1": "Создайте промис с нуля",
      "lvl2": "Создайте класс CustomPromise, который реализует функционал класса Promise",
      "lvl3": ["promise"]
    }
  },
  {
    "content": "Реализуйте функцию debounce",
    "id": "ec903c97-b57a-476e-8c76-6a72f7df4614",
    "type": "lvl1",
    "url": "/ru/js/task/create-function-debounce",
    "hierarchy": {
      "lvl1": "Реализуйте функцию debounce",
      "lvl2": "Результатом декоратора debounce(f, ms) должна быть обёртка, которая передаёт вызов f не более одного раза в ms миллисекунд. Другими словами, когда мы вызываем debounce, это гарантирует, что все остальные вызовы будут игнорироваться в течение ms.",
      "lvl3": ["array", "debounce"]
    }
  },
  {
    "content": "Реализуйте функцию throttle",
    "id": "f03d26a4-bbcf-4ab9-8690-bf1c7dfde2b7",
    "type": "lvl1",
    "url": "/ru/js/task/create-function-throttle",
    "hierarchy": {
      "lvl1": "Реализуйте функцию throttle",
      "lvl2": "Создайте «тормозящий» декоратор throttle(f, ms), который возвращает обёртку, передавая вызов в f не более одного раза в ms миллисекунд. Те вызовы, которые попадают в период «торможения», игнорируются.",
      "lvl3": ["array", "throttle"]
    }
  },
  {
    "content": "Реализуйте метод reduce",
    "id": "0bf0668a-398b-45b5-83dc-4ef548bc25cd",
    "type": "lvl1",
    "url": "/ru/js/task/create-method-reduce",
    "hierarchy": {
      "lvl1": "Реализуйте метод reduce",
      "lvl2": "Представьте что в JS отсуствует функция reduce и реализуйте ее самостоятельно c помощью прототипов",
      "lvl3": ["array", "reduce"]
    }
  },
  {
    "content": "Реализуйте аналог Promise.all",
    "id": "1287b725-3f55-450a-94d1-7c91e084db2e",
    "type": "lvl1",
    "url": "/ru/js/task/create-promise-all",
    "hierarchy": {
      "lvl1": "Реализуйте аналог Promise.all",
      "lvl2": "Добавьте функцию promiseAll, принимающую массив с промисами и выполняющую их по очереди",
      "lvl3": ["promise"]
    }
  },
  {
    "content": "Реализовуйте аналог bind",
    "id": "0177acf6-39b7-4599-aee0-07d56d0e77cb",
    "type": "lvl1",
    "url": "/ru/js/task/create-prototype-bind",
    "hierarchy": {
      "lvl1": "Реализовуйте аналог bind",
      "lvl2": "Представьте что в JS отсуствует функция bind и реализуйте ее самостоятельно c помощью прототипов",
      "lvl3": ["prototype", "bind"]
    }
  },
  {
    "content": "Реализуйте делегирование",
    "id": "62cb18d6-8286-48a9-b64d-76ba584a5a06",
    "type": "lvl1",
    "url": "/ru/js/task/how-to-delegation",
    "hierarchy": {
      "lvl1": "Реализуйте делегирование",
      "lvl2": "Реализуйте функцию, принимающую название события, элемент родителя, селектор дочернего элемента и функцию callback, производящую действия над дочернем элементом",
      "lvl3": ["event delegation", "DOM"]
    }
  },
  {
    "content": "Идентичный алфавит",
    "id": "28979c17-fd59-4162-af6e-c1ccd854997b",
    "type": "lvl1",
    "url": "/ru/js/task/is-pallindrom",
    "hierarchy": {
      "lvl1": "Идентичный алфавит",
      "lvl2": "Необходимо написать функцию, принимающую в аргументах две строки и возвращающую true, если эти строки состоят из идентичных букв.",
      "lvl3": ["string", "sort"]
    }
  },
  {
    "content": "Сделайте вложенный массив плоским",
    "id": "716e9f2a-a374-4f9f-b418-2fa3341bdd59",
    "type": "lvl1",
    "url": "/ru/js/task/make-flat-array",
    "hierarchy": {
      "lvl1": "Сделайте вложенный массив плоским",
      "lvl2": "Создайте функцию принимающую массив разных уровней вложенности, и возвращающую массив без вложенности",
      "lvl3": ["array", "flat"]
    }
  },
  {
    "content": "Сортировка нечётных",
    "id": "7543ffd9-e193-4d1a-b2e3-66e2f774d67c",
    "type": "lvl1",
    "url": "/ru/js/task/odd-sort",
    "hierarchy": {
      "lvl1": "Сортировка нечётных",
      "lvl2": "Необходимо написать функцию, принимающую в аргументах массив и возвращающую новый массив, в котором отсортированы все нечетные числа по возрастанию, в то время как чётные остаются на своих местах.",
      "lvl3": ["array", "sort"]
    }
  },
  {
    "content": "Сумма вершин дерева",
    "id": "c68caee3-f507-493e-ac65-eef75f7162ba",
    "type": "lvl1",
    "url": "/ru/js/task/sum-of-tree",
    "hierarchy": {
      "lvl1": "Сумма вершин дерева",
      "lvl2": "Найдите сумму вершин для дерева, без ограничений по вложенности",
      "lvl3": ["array", "recursion"]
    }
  },
  {
    "content": "props и state в React",
    "id": "36de9b3c-ad87-498f-b7bb-a72363512684",
    "type": "lvl1",
    "url": "/ru/react/question/difference-between-props-and-state",
    "hierarchy": {
      "lvl1": "props и state в React",
      "lvl2": "Расскажите что такое props и state в React, в чем их отличия и для чего они нужны",
      "lvl3": ["react state", "react props"]
    }
  },
  {
    "content": "Для чего нужен атрибут key в React?",
    "id": "42326d5e-bad5-429e-8ba6-c69f46ebc1fd",
    "type": "lvl1",
    "url": "/ru/react/question/key",
    "hierarchy": {
      "lvl1": "Для чего нужен атрибут key в React?",
      "lvl2": "Расскажите чего нужен атрибут key при рендере в JSX списка элементов",
      "lvl3": ["react key"]
    }
  },
  {
    "content": "Порталы в React",
    "id": "fb982602-bfb9-4b42-af5a-c39c5b1630e6",
    "type": "lvl1",
    "url": "/ru/react/question/portal",
    "hierarchy": {
      "lvl1": "Порталы в React",
      "lvl2": "Расскажите что такое порталы в React и где их применяют",
      "lvl3": ["react portal"]
    }
  },
  {
    "content": "PureComponent",
    "id": "9c0549ee-261f-4cdc-b596-0868933d8219",
    "type": "lvl1",
    "url": "/ru/react/question/pure-component",
    "hierarchy": {
      "lvl1": "PureComponent",
      "lvl2": "Расскажите что такое PureComponent, в чем его особенности и чем он отличается от обычных компонент",
      "lvl3": ["PureComponent"]
    }
  },
  {
    "content": "Методы жизненного цикла React",
    "id": "6f9a357e-868b-4c3b-abcc-8cb6a89acb1f",
    "type": "lvl1",
    "url": "/ru/react/question/react-lifecycle",
    "hierarchy": {
      "lvl1": "Методы жизненного цикла React",
      "lvl2": "Какие методы жизненного цикла есть в React и в чем их особенности",
      "lvl3": ["react lifecycle methods"]
    }
  },
  {
    "content": "React Reconciliation",
    "id": "bd737d1b-7ba1-4afb-b6b7-3befa2fddcc0",
    "type": "lvl1",
    "url": "/ru/react/question/react-reconciliation",
    "hierarchy": {
      "lvl1": "React Reconciliation",
      "lvl2": "Что такое React Reconciliation (Cверка) и как он работает?",
      "lvl3": ["react reconciliation"]
    }
  },
  {
    "content": "Типы компонентов есть в React",
    "id": "dc277648-1301-4c10-8e5e-108da2171804",
    "type": "lvl1",
    "url": "/ru/react/question/type-or-react-component",
    "hierarchy": {
      "lvl1": "Типы компонентов есть в React",
      "lvl2": "Расскажите какие основные типы компонентов есть в React, в чем их приемущества и недостатки",
      "lvl3": ["react component"]
    }
  },
  {
    "content": "Виртуальный DOM",
    "id": "e190e34c-380c-4af5-b3dc-6333beaf17da",
    "type": "lvl1",
    "url": "/ru/react/question/v-dom",
    "hierarchy": {
      "lvl1": "Виртуальный DOM",
      "lvl2": "Что такое виртуальный DOM и какие у него приемущества",
      "lvl3": ["Virtual DOM"]
    }
  },
  {
    "content": "Почините setState",
    "id": "26c76da6-b9bf-487a-abd3-211fbde897a8",
    "type": "lvl1",
    "url": "/ru/react/task/buggy-counter",
    "hierarchy": {
      "lvl1": "Почините setState",
      "lvl2": "Исправьте поведение счетчика, на каждый клик он должен увеличивать state на 5",
      "lvl3": ["setState"]
    }
  }
]
