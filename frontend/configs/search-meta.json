[
  {
    "content": "Методы перебора массива",
    "id": "d619b631-eec4-4ba5-8c7e-ce92aceec38d",
    "type": "lvl1",
    "url": "/ru/js/question/array-iterate-methods",
    "hierarchy": {
      "lvl1": "Методы перебора массива",
      "lvl2": "Назовите какими методами можно перебрать массив и что каждый из них делает",
      "lvl3": ["array", "forEach", "filer", "map", "every", "some", "reduce"]
    }
  },
  {
    "content": "Как работают методы apply(), call() и bind()",
    "id": "4429d364-fdbe-4a25-a995-c2955fa376f4",
    "type": "lvl1",
    "url": "/ru/js/question/bind-call-apply",
    "hierarchy": {
      "lvl1": "Как работают методы apply(), call() и bind()",
      "lvl2": "Расскажите как работает привязка к контексту, и в чем отличие этих методов",
      "lvl3": ["apply", "call", "bind"]
    }
  },
  {
    "content": "Что такое замыкание",
    "id": "5fb0499d-b807-4736-8b86-c4deceddf81a",
    "type": "lvl1",
    "url": "/ru/js/question/clousure",
    "hierarchy": {
      "lvl1": "Что такое замыкание",
      "lvl2": "Объясните что такое замыкание для чего его используют, и какие приемущества он дает.",
      "lvl3": ["fundamental", "closure", "function"]
    }
  },
  {
    "content": "Что такое делегирование событий",
    "id": "af8c4a45-c130-42cc-9dd6-f09aaf03a9f9",
    "type": "lvl1",
    "url": "/ru/js/question/event-delegation",
    "hierarchy": {
      "lvl1": "Что такое делегирование событий",
      "lvl2": "Объясните делегирование событий, в чем его смысл и основные приемущесива",
      "lvl3": ["fundamental", "event delegation"]
    }
  },
  {
    "content": "event loop",
    "id": "fa4638b2-1fd0-4acf-8c3d-b0088ba98f4a",
    "type": "lvl1",
    "url": "/ru/js/question/event-loop",
    "hierarchy": {
      "lvl1": "event loop",
      "lvl2": "Что такое цикл событий (event loop) и как он работает?",
      "lvl3": ["fundamental", "event loop"]
    }
  },
  {
    "content": "Какие ложные значния есть в JS",
    "id": "28f67024-9254-4cb1-9ff8-7ade6eaacb1c",
    "type": "lvl1",
    "url": "/ru/js/question/falsy-values",
    "hierarchy": {
      "lvl1": "Какие ложные значния есть в JS",
      "lvl2": "Перечислите какие ложные значения есть",
      "lvl3": ["falsy values"]
    }
  },
  {
    "content": "Что такое Promise",
    "id": "264cfacf-c7f3-46b6-9c48-209308cd80a7",
    "type": "lvl1",
    "url": "/ru/js/question/promise",
    "hierarchy": {
      "lvl1": "Что такое Promise",
      "lvl2": "Расскажите что такое Promise и зачем он используется",
      "lvl3": ["fundamental", "this"]
    }
  },
  {
    "content": "Что такое прототипы",
    "id": "90f570d2-afaa-4795-9446-6c492cfd86bb",
    "type": "lvl1",
    "url": "/ru/js/question/protorype-inheratence",
    "hierarchy": {
      "lvl1": "Что такое прототипы",
      "lvl2": "Расскажите что такое прототипы и как работает прототипное наследование",
      "lvl3": ["fundamental", "prototype inheritance", "prototype"]
    }
  },
  {
    "content": "Set, Map, WeakSet и WeakMap",
    "id": "193ba6fd-0689-43b6-8576-50db07927c16",
    "type": "lvl1",
    "url": "/ru/js/question/set-map-weakset-weak-map",
    "hierarchy": {
      "lvl1": "Set, Map, WeakSet и WeakMap",
      "lvl2": "Что такое Set, Map, WeakSet и WeakMap и в чем их особенности",
      "lvl3": ["Set", "Map", "WeakSet", "WeakMap"]
    }
  },
  {
    "content": "Как работает this",
    "id": "f3bb925e-d0f4-453b-88c8-ca1ac359dd6d",
    "type": "lvl1",
    "url": "/ru/js/question/this-keyword",
    "hierarchy": {
      "lvl1": "Как работает this",
      "lvl2": "Расскажите как this работает с разными областями видимости, и какие особенности поведетия есть",
      "lvl3": ["fundamental", "this"]
    }
  },
  {
    "content": "Уникализация значений в массиве",
    "id": "e78b023a-216f-41e4-8a3f-43daaa9d4709",
    "type": "lvl1",
    "url": "/ru/js/task/array-unique-items",
    "hierarchy": {
      "lvl1": "Уникализация значений в массиве",
      "lvl2": "Необходимо написать функцию, принимающую в аргументах массив целых чисел и возвращающую новый массив, состоящий только из уникальных значений первого массива.",
      "lvl3": ["array"]
    }
  },
  {
    "content": "Функция Bomb",
    "id": "0f5e6b7c-0001-4c6d-b44d-487469d5f2b7",
    "type": "lvl1",
    "url": "/ru/js/task/bomb",
    "hierarchy": {
      "lvl1": "Функция Bomb",
      "lvl2": "Надо реализовать «бомбу» (в виде функции-конструктора), которая получает на входе время, через которое взорвется и некоторый «звук взрыва» (строку, которую вернет через заданное время)",
      "lvl3": ["prototype", "class"]
    }
  },
  {
    "content": "Функция клонирования объекта",
    "id": "0045c46b-f9cb-4c64-9332-bcbcbd0a6e94",
    "type": "lvl1",
    "url": "/ru/js/task/clone-object",
    "hierarchy": {
      "lvl1": "Функция клонирования объекта",
      "lvl2": "Напишите функцию cloneObj, в результате которой создается новая копия объекта",
      "lvl3": ["spread", "assign", "object"]
    }
  },
  {
    "content": "Создайте промис с нуля",
    "id": "7fe3448e-3ef3-474b-917d-a41c139399fc",
    "type": "lvl1",
    "url": "/ru/js/task/create-custom-promise",
    "hierarchy": {
      "lvl1": "Создайте промис с нуля",
      "lvl2": "Создайте класс CustomPromise, который реализует функционал new Promise",
      "lvl3": ["promise"]
    }
  },
  {
    "content": "Реализуйте функцию debounce",
    "id": "c0e96f9c-a761-42c3-be43-10e2a26679f3",
    "type": "lvl1",
    "url": "/ru/js/task/create-function-debounce",
    "hierarchy": {
      "lvl1": "Реализуйте функцию debounce",
      "lvl2": "Результатом декоратора debounce(f, ms) должна быть обёртка, которая передаёт вызов f не более одного раза в ms миллисекунд. Другими словами, когда мы вызываем debounce, это гарантирует, что все остальные вызовы будут игнорироваться в течение ms.",
      "lvl3": ["array", "debounce"]
    }
  },
  {
    "content": "Реализуйте функцию throttle",
    "id": "77dd9de7-c633-4bbc-9d72-1f51e52f2435",
    "type": "lvl1",
    "url": "/ru/js/task/create-function-throttle",
    "hierarchy": {
      "lvl1": "Реализуйте функцию throttle",
      "lvl2": "Создайте «тормозящий» декоратор throttle(f, ms), который возвращает обёртку, передавая вызов в f не более одного раза в ms миллисекунд. Те вызовы, которые попадают в период «торможения», игнорируются.",
      "lvl3": ["array", "throttle"]
    }
  },
  {
    "content": "Реализуйте метод reduce",
    "id": "ad366c8a-ae34-4530-adf7-4ccce126608f",
    "type": "lvl1",
    "url": "/ru/js/task/create-method-reduce",
    "hierarchy": {
      "lvl1": "Реализуйте метод reduce",
      "lvl2": "Представьте что в JS отсуствует функция reduce и реализуйте ее самостоятельно c помощью прототипов",
      "lvl3": ["array", "reduce"]
    }
  },
  {
    "content": "Реализуйте аналог Promise.all",
    "id": "0e8e8e61-2b75-430a-8eff-fdc9f73b305c",
    "type": "lvl1",
    "url": "/ru/js/task/create-promise-all",
    "hierarchy": {
      "lvl1": "Реализуйте аналог Promise.all",
      "lvl2": "Добавьте функцию promiseAll, принимающую массив с промисами и выполняющую их по очереди",
      "lvl3": ["promise"]
    }
  },
  {
    "content": "Реализовуйте аналог Function.prototype.bind",
    "id": "cf37807c-6dfd-42f8-9860-abfbcbb5a033",
    "type": "lvl1",
    "url": "/ru/js/task/create-prototype-bind",
    "hierarchy": {
      "lvl1": "Реализовуйте аналог Function.prototype.bind",
      "lvl2": "Представьте что в JS отсуствует функция bind и реализуйте ее самостоятельно c помощью прототипов",
      "lvl3": ["prototype", "bind"]
    }
  },
  {
    "content": "Реализуйте делегирование",
    "id": "301162cc-0870-425e-8c9c-9ebb5eceb034",
    "type": "lvl1",
    "url": "/ru/js/task/how-to-delegation",
    "hierarchy": {
      "lvl1": "Реализуйте делегирование",
      "lvl2": "Реализуйте функцию, принимающую название события, элемент родителя, селектор дочернего элемента и функцию callback, производящую действия над дочернем элементом",
      "lvl3": ["event delegation", "DOM"]
    }
  },
  {
    "content": "Идентичный алфавит",
    "id": "3f0b9ca4-e0cf-41cb-bf7e-f732065c9d94",
    "type": "lvl1",
    "url": "/ru/js/task/is-pallindrom",
    "hierarchy": {
      "lvl1": "Идентичный алфавит",
      "lvl2": "Необходимо написать функцию, принимающую в аргументах две строки и возвращающую true, если эти строки состоят из идентичных букв и false в противном случае.",
      "lvl3": ["string", "sort"]
    }
  },
  {
    "content": "Сделайте вложенный массив плоским",
    "id": "0280e93e-2f5b-46a0-b4f9-49690a530307",
    "type": "lvl1",
    "url": "/ru/js/task/make-flat-array",
    "hierarchy": {
      "lvl1": "Сделайте вложенный массив плоским",
      "lvl2": "Создайте функцию принимающую массив разных уровней вложенности, и возвращающую массив без вложенности",
      "lvl3": ["array", "flat"]
    }
  },
  {
    "content": "Сортировка нечётных",
    "id": "b2ce94c3-0382-45ff-8737-2d11179e8ce2",
    "type": "lvl1",
    "url": "/ru/js/task/odd-sort",
    "hierarchy": {
      "lvl1": "Сортировка нечётных",
      "lvl2": "Необходимо написать функцию, принимающую в аргументах массив и возвращающую новый массив, в котором отсортированы все нечетные числа по возрастанию, в то время как чётные остаются на своих местах.",
      "lvl3": ["array", "sort"]
    }
  },
  {
    "content": "Сумма вершин дерева",
    "id": "83795e02-c571-42fa-8a16-28a835149219",
    "type": "lvl1",
    "url": "/ru/js/task/sum-of-tree",
    "hierarchy": {
      "lvl1": "Сумма вершин дерева",
      "lvl2": "Найдите сумму вершин для дерева, без ограничений по вложенности",
      "lvl3": ["array", "recursion"]
    }
  },
  {
    "content": "props и state в React",
    "id": "b466b648-4852-4070-9a51-040dcfd5f768",
    "type": "lvl1",
    "url": "/ru/react/question/difference-between-props-and-state",
    "hierarchy": {
      "lvl1": "props и state в React",
      "lvl2": "Расскажите что такое props и state в React, в чем их отличия и для чего они нужны",
      "lvl3": ["react state", "react props"]
    }
  },
  {
    "content": "Для чего нужен атрибут key в React?",
    "id": "ae6a0b6b-e026-4650-be55-8e5b728e2d4e",
    "type": "lvl1",
    "url": "/ru/react/question/key",
    "hierarchy": {
      "lvl1": "Для чего нужен атрибут key в React?",
      "lvl2": "Расскажите чего нужен атрибут key при рендере в JSX списка элементов",
      "lvl3": ["react key"]
    }
  },
  {
    "content": "Порталы в React",
    "id": "785f5f1c-275a-4ec2-aa09-75b248e6790c",
    "type": "lvl1",
    "url": "/ru/react/question/portal",
    "hierarchy": {
      "lvl1": "Порталы в React",
      "lvl2": "Расскажите что такое порталы в React и где их применяют",
      "lvl3": ["react portal"]
    }
  },
  {
    "content": "PureComponent",
    "id": "c15e1048-6110-409d-9732-253e68c0d5cb",
    "type": "lvl1",
    "url": "/ru/react/question/pure-component",
    "hierarchy": {
      "lvl1": "PureComponent",
      "lvl2": "Расскажите что такое PureComponent, в чем его особенности и чем он отличается от обычных компонент",
      "lvl3": ["PureComponent"]
    }
  },
  {
    "content": "React Reconciliation",
    "id": "ae95dcb7-cbdc-48d0-9f7d-fb83daf226f7",
    "type": "lvl1",
    "url": "/ru/react/question/react-reconciliation",
    "hierarchy": {
      "lvl1": "React Reconciliation",
      "lvl2": "Что такое React Reconciliation (Cверка) и как он работает?",
      "lvl3": ["react reconciliation"]
    }
  },
  {
    "content": "Типы компонентов есть в React",
    "id": "efb20eae-5393-4baa-8533-4d932b9a4577",
    "type": "lvl1",
    "url": "/ru/react/question/type-or-react-component",
    "hierarchy": {
      "lvl1": "Типы компонентов есть в React",
      "lvl2": "Расскажите какие основные типы компонентов есть в React, в чем их приемущества и недостатки",
      "lvl3": ["react component"]
    }
  },
  {
    "content": "Почему не работает setState",
    "id": "5febcfa9-036b-4455-96e4-dbb093dadde7",
    "type": "lvl1",
    "url": "/ru/react/task/buggy-counter",
    "hierarchy": {
      "lvl1": "Почему не работает setState",
      "lvl2": "Исправьте поведение счетчика, на каждый клик он должен увеличивать state на 5",
      "lvl3": ["setState"]
    }
  }
]
