[
  {
    "content": "Методы перебора массива",
    "id": "22189379-5fa8-43c1-919c-fffce9989e06",
    "type": "lvl1",
    "url": "/ru/js/question/array-iterate-methods",
    "hierarchy": {
      "lvl1": "Методы перебора массива",
      "lvl2": "Назовите какими методами можно перебрать массив и что каждый из них делает",
      "lvl3": ["array", "forEach", "filer", "map", "every", "some", "reduce"]
    }
  },
  {
    "content": "Как работают методы apply(), call() и bind()",
    "id": "630dfa77-8290-459f-a51a-1bcd06e0a5b6",
    "type": "lvl1",
    "url": "/ru/js/question/bind-call-apply",
    "hierarchy": {
      "lvl1": "Как работают методы apply(), call() и bind()",
      "lvl2": "Расскажите как работает привязка к контексту, и в чем отличие этих методов",
      "lvl3": ["apply", "call", "bind"]
    }
  },
  {
    "content": "Что такое замыкание",
    "id": "67a7dafd-4d04-4804-9aa1-56a9f99b4ead",
    "type": "lvl1",
    "url": "/ru/js/question/clousure",
    "hierarchy": {
      "lvl1": "Что такое замыкание",
      "lvl2": "Объясните что такое замыкание для чего его используют, и какие приемущества он дает.",
      "lvl3": ["fundamental", "closure", "function"]
    }
  },
  {
    "content": "Что такое делегирование событий",
    "id": "b035017d-66c8-4840-9bdc-63dc2fa973f5",
    "type": "lvl1",
    "url": "/ru/js/question/event-delegation",
    "hierarchy": {
      "lvl1": "Что такое делегирование событий",
      "lvl2": "Объясните делегирование событий, в чем его смысл и основные приемущесива",
      "lvl3": ["fundamental", "event delegation"]
    }
  },
  {
    "content": "event loop",
    "id": "3d625c3d-3cfc-42e9-aff7-9254d25cfa7d",
    "type": "lvl1",
    "url": "/ru/js/question/event-loop",
    "hierarchy": {
      "lvl1": "event loop",
      "lvl2": "Что такое цикл событий (event loop) и как он работает?",
      "lvl3": ["fundamental", "event loop"]
    }
  },
  {
    "content": "Какие ложные значния есть в JS",
    "id": "2406f176-f128-4260-8bbb-233cc343a6f8",
    "type": "lvl1",
    "url": "/ru/js/question/falsy-values",
    "hierarchy": {
      "lvl1": "Какие ложные значния есть в JS",
      "lvl2": "Перечислите какие ложные значения есть",
      "lvl3": ["falsy values"]
    }
  },
  {
    "content": "Что такое Promise",
    "id": "8138f8dc-de96-4ce1-aa7e-614d65a7bacd",
    "type": "lvl1",
    "url": "/ru/js/question/promise",
    "hierarchy": {
      "lvl1": "Что такое Promise",
      "lvl2": "Расскажите что такое Promise и зачем он используется",
      "lvl3": ["fundamental", "this"]
    }
  },
  {
    "content": "Что такое прототипы",
    "id": "e92ff6e6-3e9b-4242-90dd-1de7e5e1597e",
    "type": "lvl1",
    "url": "/ru/js/question/protorype-inheratence",
    "hierarchy": {
      "lvl1": "Что такое прототипы",
      "lvl2": "Расскажите что такое прототипы и как работает прототипное наследование",
      "lvl3": ["fundamental", "prototype inheritance", "prototype"]
    }
  },
  {
    "content": "Set, Map, WeakSet и WeakMap",
    "id": "09d07cdd-5c24-4423-a37f-6dc858f1a2c7",
    "type": "lvl1",
    "url": "/ru/js/question/set-map-weakset-weak-map",
    "hierarchy": {
      "lvl1": "Set, Map, WeakSet и WeakMap",
      "lvl2": "Что такое Set, Map, WeakSet и WeakMap и в чем их особенности",
      "lvl3": ["Set", "Map", "WeakSet", "WeakMap"]
    }
  },
  {
    "content": "Как работает this",
    "id": "f4de4641-8b40-434e-86b8-68561160fa92",
    "type": "lvl1",
    "url": "/ru/js/question/this-keyword",
    "hierarchy": {
      "lvl1": "Как работает this",
      "lvl2": "Расскажите как this работает с разными областями видимости, и какие особенности поведетия есть",
      "lvl3": ["fundamental", "this"]
    }
  },
  {
    "content": "Уникализация значений в массиве",
    "id": "7c24446f-cc8c-456f-95a4-29b9d4c737f6",
    "type": "lvl1",
    "url": "/ru/js/task/array-unique-items",
    "hierarchy": {
      "lvl1": "Уникализация значений в массиве",
      "lvl2": "Необходимо написать функцию, принимающую в аргументах массив целых чисел и возвращающую новый массив, состоящий только из уникальных значений первого массива.",
      "lvl3": ["array"]
    }
  },
  {
    "content": "Функция Bomb",
    "id": "b29e95a0-68f8-45bc-b4da-377ee4572871",
    "type": "lvl1",
    "url": "/ru/js/task/bomb",
    "hierarchy": {
      "lvl1": "Функция Bomb",
      "lvl2": "Надо реализовать «бомбу» (в виде функции-конструктора), которая получает на входе время, через которое взорвется и некоторый «звук взрыва» (строку, которую вернет через заданное время)",
      "lvl3": ["prototype", "class"]
    }
  },
  {
    "content": "Функция клонирования объекта",
    "id": "be0fd54d-7fb3-463c-863c-78e3784f6c00",
    "type": "lvl1",
    "url": "/ru/js/task/clone-object",
    "hierarchy": {
      "lvl1": "Функция клонирования объекта",
      "lvl2": "Напишите функцию cloneObj, в результате которой создается новая копия объекта",
      "lvl3": ["spread", "assign", "object"]
    }
  },
  {
    "content": "Создайте промис с нуля",
    "id": "b0d2c2d3-f369-466d-a38d-60ca5bc752e5",
    "type": "lvl1",
    "url": "/ru/js/task/create-custom-promise",
    "hierarchy": {
      "lvl1": "Создайте промис с нуля",
      "lvl2": "Создайте класс CustomPromise, который реализует функционал new Promise",
      "lvl3": ["promise"]
    }
  },
  {
    "content": "Реализуйте функцию debounce",
    "id": "8af21ee9-05f2-499c-8086-39848eb7b1b6",
    "type": "lvl1",
    "url": "/ru/js/task/create-function-debounce",
    "hierarchy": {
      "lvl1": "Реализуйте функцию debounce",
      "lvl2": "Результатом декоратора debounce(f, ms) должна быть обёртка, которая передаёт вызов f не более одного раза в ms миллисекунд. Другими словами, когда мы вызываем debounce, это гарантирует, что все остальные вызовы будут игнорироваться в течение ms.",
      "lvl3": ["array", "debounce"]
    }
  },
  {
    "content": "Реализуйте функцию throttle",
    "id": "91a90c3a-9d9c-4e19-8772-5d7fd70f5f1b",
    "type": "lvl1",
    "url": "/ru/js/task/create-function-throttle",
    "hierarchy": {
      "lvl1": "Реализуйте функцию throttle",
      "lvl2": "Создайте «тормозящий» декоратор throttle(f, ms), который возвращает обёртку, передавая вызов в f не более одного раза в ms миллисекунд. Те вызовы, которые попадают в период «торможения», игнорируются.",
      "lvl3": ["array", "throttle"]
    }
  },
  {
    "content": "Реализуйте метод reduce",
    "id": "db512687-4d8a-4ec0-b12a-35b552d582ab",
    "type": "lvl1",
    "url": "/ru/js/task/create-method-reduce",
    "hierarchy": {
      "lvl1": "Реализуйте метод reduce",
      "lvl2": "Представьте что в JS отсуствует функция reduce и реализуйте ее самостоятельно c помощью прототипов",
      "lvl3": ["array", "reduce"]
    }
  },
  {
    "content": "Реализуйте аналог Promise.all",
    "id": "6aaf63ec-7af0-438a-b5c6-ada77a560a1c",
    "type": "lvl1",
    "url": "/ru/js/task/create-promise-all",
    "hierarchy": {
      "lvl1": "Реализуйте аналог Promise.all",
      "lvl2": "Добавьте функцию promiseAll, принимающую массив с промисами и выполняющую их по очереди",
      "lvl3": ["promise"]
    }
  },
  {
    "content": "Реализовуйте аналог Function.prototype.bind",
    "id": "b216b9bb-158d-4c81-a620-84b4a4815209",
    "type": "lvl1",
    "url": "/ru/js/task/create-prototype-bind",
    "hierarchy": {
      "lvl1": "Реализовуйте аналог Function.prototype.bind",
      "lvl2": "Представьте что в JS отсуствует функция bind и реализуйте ее самостоятельно c помощью прототипов",
      "lvl3": ["prototype", "bind"]
    }
  },
  {
    "content": "Реализуйте делегирование",
    "id": "683ef4c8-0288-4db6-81f8-f26f2c43ede6",
    "type": "lvl1",
    "url": "/ru/js/task/how-to-delegation",
    "hierarchy": {
      "lvl1": "Реализуйте делегирование",
      "lvl2": "Реализуйте функцию, принимающую название события, элемент родителя, селектор дочернего элемента и функцию callback, производящую действия над дочернем элементом",
      "lvl3": ["event delegation", "DOM"]
    }
  },
  {
    "content": "Идентичный алфавит",
    "id": "978528a4-3c04-4d81-b458-2bfeb5c3006d",
    "type": "lvl1",
    "url": "/ru/js/task/is-pallindrom",
    "hierarchy": {
      "lvl1": "Идентичный алфавит",
      "lvl2": "Необходимо написать функцию, принимающую в аргументах две строки и возвращающую true, если эти строки состоят из идентичных букв и false в противном случае.",
      "lvl3": ["string", "sort"]
    }
  },
  {
    "content": "Сделайте вложенный массив плоским",
    "id": "279eca06-0491-4c57-bdcf-83495ef0c512",
    "type": "lvl1",
    "url": "/ru/js/task/make-flat-array",
    "hierarchy": {
      "lvl1": "Сделайте вложенный массив плоским",
      "lvl2": "Создайте функцию принимающую массив разных уровней вложенности, и возвращающую массив без вложенности",
      "lvl3": ["array", "flat"]
    }
  },
  {
    "content": "Сортировка нечётных",
    "id": "388b3f97-7f4b-4a0f-8686-775b4791cceb",
    "type": "lvl1",
    "url": "/ru/js/task/odd-sort",
    "hierarchy": {
      "lvl1": "Сортировка нечётных",
      "lvl2": "Необходимо написать функцию, принимающую в аргументах массив и возвращающую новый массив, в котором отсортированы все нечетные числа по возрастанию, в то время как чётные остаются на своих местах.",
      "lvl3": ["array", "sort"]
    }
  },
  {
    "content": "Сумма вершин дерева",
    "id": "e573ecdb-4afb-467c-9543-5bfeb6dc5bbd",
    "type": "lvl1",
    "url": "/ru/js/task/sum-of-tree",
    "hierarchy": {
      "lvl1": "Сумма вершин дерева",
      "lvl2": "Найдите сумму вершин для дерева, без ограничений по вложенности",
      "lvl3": ["array", "recursion"]
    }
  },
  {
    "content": "props и state в React",
    "id": "915d2433-4cb3-4765-9823-dc8cab23cbef",
    "type": "lvl1",
    "url": "/ru/react/question/difference-between-props-and-state",
    "hierarchy": {
      "lvl1": "props и state в React",
      "lvl2": "Расскажите что такое props и state в React, в чем их отличия и для чего они нужны",
      "lvl3": ["react state", "react props"]
    }
  },
  {
    "content": "Для чего нужен атрибут key в React?",
    "id": "db796aaf-5c44-42c3-a6cf-b01e986018f9",
    "type": "lvl1",
    "url": "/ru/react/question/key",
    "hierarchy": {
      "lvl1": "Для чего нужен атрибут key в React?",
      "lvl2": "Расскажите чего нужен атрибут key при рендере в JSX списка элементов",
      "lvl3": ["react key"]
    }
  },
  {
    "content": "React Reconciliation",
    "id": "5cce1157-c1ba-4b38-8258-eb0cc1352885",
    "type": "lvl1",
    "url": "/ru/react/question/react-reconciliation",
    "hierarchy": {
      "lvl1": "React Reconciliation",
      "lvl2": "то такое React Reconciliation (Cверка) и как он работает?",
      "lvl3": ["react reconciliation"]
    }
  },
  {
    "content": "Типы компонентов есть в React",
    "id": "49aa15ac-27c8-4e67-aaa2-5716c150d2b0",
    "type": "lvl1",
    "url": "/ru/react/question/type-or-react-component",
    "hierarchy": {
      "lvl1": "Типы компонентов есть в React",
      "lvl2": "Расскажите какие основные типы компонентов есть в React, в чем их приемущества и недостатки",
      "lvl3": ["react component"]
    }
  },
  {
    "content": "Почему не работает setState",
    "id": "5214563b-b7a9-4d5f-bba0-37b39580c7af",
    "type": "lvl1",
    "url": "/ru/react/task/buggy-counter",
    "hierarchy": {
      "lvl1": "Почему не работает setState",
      "lvl2": "Исправьте поведение счетчика, на каждый клик он должен увеличивать state на 5",
      "lvl3": ["setState"]
    }
  }
]
